/// <reference types="@figma/plugin-typings" />

// API keys configuration (replace with your actual keys)
const OPENAI_API_KEY = ``; // OpenAI key

// Function to call fine-tuned GPT model
async function callFineTunedModel(prompt: string) {
  try {
    console.log('Calling fine-tuned model API with prompt:', prompt);

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: "ft:gpt-4o-2024-08-06:personal::ACCxOc56", // Replace with your actual fine-tuned model ID
        messages: [
          {
            role: "system",
            content: "Provide structured HTML and CSS for a web component."
          },
          {
            role: "user",
            content: prompt
          }
        ]
      })
    });

    if (!response.ok) {
      throw new Error(`API error: ${response.status}`);
    }

    const responseData = await response.json();
    const output = responseData.choices[0]?.message?.content.trim();
    console.log('Response from fine-tuned model:', output);
    return output;
  } catch (error) {
    console.error('Error calling fine-tuned model:', error);
    figma.notify('Failed to call the fine-tuned model. Check console for details.');
    return null;
  }
}

// Function to convert the generated HTML structure into Figma components
function convertHtmlToFigma(html: string) {
  const parser = new DOMParser();
  const doc = parser.parseFromString(html, 'text/html');

  const frame = figma.createFrame();
  frame.name = "Generated Component";
  frame.resize(800, 600); // Default size, can be adjusted
  frame.backgrounds = [{ type: "SOLID", color: { r: 1, g: 1, b: 1 } }];

  function parseNode(node: Element, parent: FrameNode) {
    if (node.nodeName === 'TEXT') {
      const textNode = figma.createText();
      textNode.characters = node.textContent || '';
      textNode.fontSize = 16; // Default font size
      textNode.x = parseFloat(node.getAttribute('x') || '0');
      textNode.y = parseFloat(node.getAttribute('y') || '0');
      parent.appendChild(textNode);
    } else if (node.nodeName === 'DIV') {
      const rect = figma.createRectangle();
      rect.resize(100, 100); // Default size
      rect.x = parseFloat(node.getAttribute('x') || '0');
      rect.y = parseFloat(node.getAttribute('y') || '0');
      parent.appendChild(rect);
    }
    // Add parsing logic for more element types if needed
    Array.from(node.children).forEach((child) => parseNode(child, parent));
  }

  Array.from(doc.body.children).forEach((child) => parseNode(child, frame));
  figma.currentPage.appendChild(frame);
  figma.viewport.scrollAndZoomIntoView([frame]);
}

// Show the HTML page in "ui.html"
figma.showUI(__html__, {
  width: 400,
  height: 300,
  title: "StarryStudioAI!"
});

// Listen for messages sent from the UI
figma.ui.onmessage = async (msg) => {
  if (msg.type === 'generate-component') {
    console.log('Received prompt:', msg.prompt);

    // Call the fine-tuned model and get the response
    const htmlOutput = await callFineTunedModel(msg.prompt);

    if (htmlOutput) {
      console.log('Received output:', htmlOutput);
      convertHtmlToFigma(htmlOutput);
    } else {
      console.error('No HTML was generated by the model.');
    }
  }
};
